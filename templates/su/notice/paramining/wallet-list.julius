if (!window.app) {
    window.app = {}
}
if (!window.app.wallets) {
    window.app.wallets = []
}
if (!window.app.unFetchedWalletsData) {
    window.app.unFetchedWalletsData = []
}
if (!window.app.walletDataFetching) {
    window.app.walletDataFetching == false
}
if (!window.app.config) {
    window.app.config = {}
}
if (!window.app.config.SU_WPD_PER_PAGE) {
    window.app.config.SU_WPD_PER_PAGE = 2
}

function fixed(x, c, n) {
    const v = (x / 100).toFixed(n)
    const cs = c.toUpperCase()
    const vm = $('<span class="value amount">' + v + '</span>')
    const cm = $('<small class="currency text-muted">' + cs + '</small>')
    const ret = $('<span/>')
    ret.append(vm).append('&nbsp;').append(cm)
    return ret
}

function mkCmdWalletParaminingDataPage(opts) {
    const cmd = {
        'type': 'command',
        'name': 'wallet-paramining-data-page',
        'per-page': opts.perPage || window.app.config.SU_WPD_PER_PAGE,
        'offset-id': opts.offsetId || 0,
        'include-html': opts.includeHtml || true
    }
    return cmd
}

function mkCmdWalletParaminingData(opts) {
    const cmd = {
        'type': 'command',
        'name': 'wallet-paramining-data',
        'wallet': opts.walletToken,
        'include-html': opts.includeHtml || true
    }
    return cmd
}

function fetchWalletParaminingDataPage(ws, params) {
    const cmd = mkCmdWalletParaminingDataPage(params)
    ws.send(JSON.stringify(cmd))
}

function fetchWalletParaminingData(ws, params) {
    const cmd = mkCmdWalletParaminingData(params)
    ws.send(JSON.stringify(cmd))
}

function checkWalletDataFetch(ws) {
    if (!window.app.walletDataFetching && window.app.unFetchedWalletsData.length > 0) {
        window.app.walletDataFetching = true
        wid = window.app.unFetchedWalletsData[0]
        fetchWalletParaminingData(ws, { walletToken: wid })
    }
}

function handleWalletParamingDataPageResponse(ws, pageSize, d) {
    function insertRow(rowData) {
        const list = $('.wallet-paramining-list')
        const token = rowData.wallet.walletId || rowData.wallet.token
        if (list.length > 0) {
            present = list.find('.wallet-stats[data-wallet-token="' + token + '"]')
            if (present.length == 0) {
                const currency = rowData.wallet.currency.contents
                const item = $('<div class="wallet-stats col-12"/>')
                item.attr('data-wallet-id', rowData.wallet.id)
                item.attr('data-wallet-token', token)
                const row = $('<div class="row"/>')
                row.append($('<div class="col-4 user-ident"><a href="/su/user-view/' + rowData.user.id + '">' + rowData.user.ident + '</a></div>'))
                row.append($('<div class="col-2 user-wallet" data-token="' + token + '"><div class="amount text-monospace text-right">' + fixed(rowData.wallet.amountCents, currency, 2).prop('outerHTML') + '</div></div>'))
                row.append($('<div class="col-2 text-right"><div class="orders text-monospace">-.--&nbsp;<small class="text-muted text-uppercase">' + currency + '</small></div></div>'))
                row.append($('<div class="col-2 text-right"><div class="withdrawal text-monospace">-.--&nbsp;<small class="text-muted text-uppercase">' + currency + '</small></div></div>'))
                row.append($('<div class="col-2 text-right"><div class="paramining text-monospace">-.-------&nbsp;<small class="text-muted text-uppercase">' + currency + '</small></div></div>'))
                const container = $('<div class="container-fluid"/>')
                container.append(row)
                item.append(container)
                list.append(item)
            }
        }
    }

    let lastId = 0
    app.wallets = [...app.wallets, ...d.data]
    if (d['next-page'] && d.data.length > 0) {
        // wallet is second element id data row and we need its id
        lastId = d.data[d.data.length - 1].wallet.id
        setTimeout(() => {
            fetchWalletParaminingDataPage(ws, {
                perPage: pageSize,
                offsetId: lastId
            })
        })
    }
    if (d.data.length) {
        d.data.map(insertRow)
        window.app.unFetchedWalletsData = window.app.unFetchedWalletsData
            .concat(d.data.map(({ wallet }) => wallet.walletId))
        setTimeout(() => {
            checkWalletDataFetch(ws)
        })
    }
}

function handleWalletParamingDataResponse(ws, d) {
    window.app.walletDataFetching = false
    window.app.unFetchedWalletsData = window.app.unFetchedWalletsData.filter(
        tok => tok != d.stats.wallet.token
    )
    setTimeout(() => checkWalletDataFetch(ws))
    const c = d.stats.wallet.currency
    const i = $(`.wallet-stats[data-wallet-token="${d.stats.wallet.token}"]`)
    i.find('.orders').html(fixed(d.stats.orders, c, 2))
    i.find('.withdrawal').html(fixed(d.stats.withdrawal, c, 2))
    if (d.paramining) {
        i.find('.paramining').html(fixed(d.paramining.amount, c, 7))
    }
}

$(document).ready(() => {
    const url = "@{SuperUserWebSocketR}".replace(/^http(s?)/, 'ws$1')
    const ws = new WebSocket(url)
    function onMessage(ev) {
        try {
            const d = JSON.parse(ev.data)
            if (d && d.type && d.command) {
                if (d.type == 'response') {
                    switch (d.command) {
                        case 'wallet-paramining-data-page':
                            handleWalletParamingDataPageResponse(
                                ws, app.config.SU_WPD_PER_PAGE, d
                            )
                            break
                        case 'wallet-paramining-data':
                            handleWalletParamingDataResponse(ws, d.data)
                            break
                        default:
                            console.groupCollapsed('Unrecognized socket JSON response')
                            console.log(d)
                            console.groupEnd()
                            break
                    }
                }
            }
        } catch (e) {
            console.groupCollapsed('Not a JSON response')
            console.log('Response data:', ev.data)
            console.log('Error:', e)
            console.groupEnd()
        }
    }
    ws.onmessage = onMessage
    ws.onopen = () => {
        fetchWalletParaminingDataPage(ws, { perPage: app.config.SU_WPD_PER_PAGE })
    }
})